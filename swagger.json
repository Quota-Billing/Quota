{
  "swagger": "2.0",
  "info": {
    "description": "A service to monitor usage of products.  Enforces quota and sends out bills based on usage.",
    "version": "1.0.0",
    "title": "Quota/Billing Service"
  },
  "tags": [
    {
      "name": "user",
      "description": "Operations about user (the people using the products)."
    },
    {
      "name": "config",
      "description": "Operations using the configuration file provided by the partner."
    },
    {
      "name": "quota",
      "description": "Operations about the quota for a user."
    },
    {
      "name": "partner",
      "description": "Operations about the partner."
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/partner/{partnerId}/product/{productId}/user/{userId}": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add a user",
        "description": "Adds a user to the databases.  Since users aren't unique (can have user with multiple products, for example) we need the partner and product this user belongs to.",
        "operationId": "addUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "description": "The id of the partner that the user belongs to. ",
            "required": true,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "path",
            "description": "The id of the product that the user belongs to. ",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user to be created. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get specified user",
        "description": "Gets the specific user specified by the partner, product, and user ids.",
        "operationId": "getUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "description": "The id of the partner that the user belongs to. ",
            "required": true,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "path",
            "description": "The id of the product that the user belongs to. ",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user to get. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a user",
        "description": "Deletes the user specified by the partner, product, and user id.  Only deletes the user from that instance, not all intances of the user id.",
        "operationId": "deleteUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "description": "The id of the partner that the user belongs to. ",
            "required": true,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "path",
            "description": "The id of the product that the user belongs to. ",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user to be created. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/setConfig": {
      "post": {
        "tags": [
          "config"
        ],
        "summary": "Sets the values based on the given config file provided.",
        "description": "Change Me",
        "operationId": "setConfig",
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/partner/{partnerId}/product/{productId}/user/{userId}/quota/{quotaId}": {
      "get": {
        "tags": [
          "quota"
        ],
        "summary": "Get specified quota",
        "description": "Gets the quota specified by the partner, product, user, and quota ids.",
        "operationId": "getQuota",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "description": "The id of the partner that the quota belongs to. ",
            "required": true,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "path",
            "description": "The id of the product that the quota belongs to. ",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user the quota belongs to. ",
            "required": true,
            "type": "string"
          },
          {
            "name": "quotaId",
            "in": "path",
            "description": "The id of the quota to get. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/partnerApi/{apiKey}": {
      "get": {
        "tags": [
          "partner"
        ],
        "summary": "Get specified partner based on API key",
        "description": "Gets the spcified partner based on the unique API key since the partner id is unknown to the partner.",
        "operationId": "getPartner",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "description": "The API key provided for the partner.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}